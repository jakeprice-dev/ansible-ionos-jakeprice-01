---
- name: Initial Server Configuration
  hosts: ionos-jakeprice-01
  become: true
  vars_files:
    - vars.yml
    - vault.yml

  tasks:

    - name: Set timezone
      community.general.timezone:
        name: Europe/London

    - name: Set hostname
      hostname:
        name: "{{ hostname }}"

    - name: Update repositories and packages
      apt:
        name: "*"
        state: latest
        update_cache: yes

    - name: Install gpg
      apt:
        pkg: gpg

    - name: Add repository keys
      ansible.builtin.apt_key:
        url: "{{ item.url }}"
        state: present
      with_items:
        - { url: https://download.docker.com/linux/debian/gpg }

    - name: Add repositories
      ansible.builtin.apt_repository:
        repo: "{{ item.repo }}"
        state: present
      with_items:
        - { repo: "deb [arch=amd64] https://download.docker.com/linux/debian bullseye stable" }

    - name: Update repositories and packages
      apt:
        name: "*"
        state: latest
        update_cache: yes

    - name: Install packages
      apt:
        pkg:
          - acl
          - apache2-utils
          - containerd.io
          - docker-ce
          - docker-ce-cli
          - docker-compose-plugin
          - fail2ban
          - git
          - net-tools
          - prometheus-node-exporter
          - python3
          - python3-pip
          - tree
          - ufw
          - vim

    - name: Install Python pip packages
      pip:
        name: 
          - docker
          - docker-compose

    - name: Add default user
      user:
        name: "{{ admin_user }}"
        shell: /bin/bash
        groups: 
          - sudo
          - docker
        append: yes
        create_home: yes

    - name: Upload public key for users
      authorized_key:
        user: "{{ item.user }}"
        state: present
        key: "{{ item.file }}"
      with_items:
        - { user: "{{ admin_user }}", file: "{{ lookup('file', '/home/jprice/.ssh/{{ hostname }}.pub') }}" }
        - { user: "{{ admin_user }}", file: "{{ lookup('file', '/home/jprice/.ssh/{{ hostname }}-github-actions.pub') }}" }

    - name: Allow passwordless sudo
      blockinfile:
        path: /etc/sudoers
        block: |
          {{ admin_user }} ALL=(ALL:ALL) NOPASSWD: ALL

    - name: Configure sshd_config
      ansible.builtin.replace:
        path: /etc/ssh/sshd_config
        regexp: "{{ item.regexp }}"
        replace: "{{ item.replace }}"
      with_items:
        - { regexp: '#IgnoreRhosts yes', replace: 'IgnoreRhosts yes' }
        - { regexp: '#LogLevel INFO', replace: 'LogLevel VERBOSE' }
        - { regexp: '#PasswordAuthentication yes', replace: 'PasswordAuthentication no' }
        - { regexp: '#PermitEmptyPasswords no', replace: 'PermitEmptyPasswords no' }
        - { regexp: '#PermitRootLogin prohibit-password', replace: 'PermitRootLogin no' }

    - name: Create directories
      file:
        path: "{{ item.path }}"
        owner: "{{ admin_user }}"
        group: "{{ admin_user }}"
        state: directory
      with_items:
        - { path: /var/log/caddy, owner: root, group: root }
        - { path: /srv/docker/, owner: "{{ admin_user }}", group: "{{ admin_user }}" }
        - { path: /srv/docker/compose, owner: "{{ admin_user }}", group: "{{ admin_user }}" }
        - { path: /srv/docker/compose/reverse-proxy, owner: "{{ admin_user }}", group: "{{ admin_user }}" }
        - { path: /srv/docker/compose/jakeprice.dev/hugo, owner: "{{ admin_user }}", group: "{{ admin_user }}" }
    
    - name: Create symbolic links
      file:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: "{{ admin_user }}"
        group: "{{ admin_user }}"
        state: link
      with_items:
        - { src: "/srv/docker/compose", dest: "/home/{{ admin_user }}/compose" }

    - name: Copy website to server
      copy:
        src: /home/jprice/my/files/code/jakeprice.dev/public
        dest: /srv/docker/compose/jakeprice.dev/hugo

    - name: Check Docker is started
      ansible.builtin.systemd:
        name: "{{ item.name }}"
        state: restarted
      with_items:
        - { name: docker }
        - { name: fail2ban }
        - { name: sshd }

    - name: Create Docker network
      docker_network:
        name: "{{ hostname }}"
        driver: bridge

